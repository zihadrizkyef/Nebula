package com.zr.nebula.activity

import android.content.Intent
import android.graphics.Color
import android.os.Bundle
import android.util.TypedValue
import androidx.activity.enableEdgeToEdge
import androidx.activity.result.contract.ActivityResultContracts.CreateDocument
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.FileProvider
import androidx.core.util.TypedValueCompat
import androidx.core.view.ViewCompat
import androidx.core.view.WindowCompat
import androidx.core.view.WindowInsetsCompat
import androidx.core.view.isVisible
import androidx.core.view.updatePadding
import com.zr.nebula.R
import com.zr.nebula.databinding.ActivityLogListBinding
import com.zr.nebula.extension.toCurrency
import com.zr.nebula.data.item.Log
import com.zr.nebula.extension.dp
import com.zr.nebula.helper.FileProviderUtil
import com.zr.nebula.helper.NebulaFileProvider
import java.io.File
import java.io.FileWriter

internal class MainActivity : AppCompatActivity() {
    companion object {
        const val FILE_HEADER = "--- Logs Generated by Nebula Library ---\n--- https://github.com/zihadrizkyef/Nebula ---\n\n\n"
    }

    private lateinit var binding: ActivityLogListBinding
    private val viewModel = MainViewModel()

    private val saveFileLauncher = registerForActivityResult(CreateDocument("text/plain")) { uri ->
        uri?.let {
            contentResolver.openOutputStream(it).use { outputStream ->
                val text = viewModel.logs.value!!.joinToString("\n\n")
                outputStream?.write(FILE_HEADER.toByteArray())
                outputStream?.write(text.toByteArray())
            }
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        binding = ActivityLogListBinding.inflate(layoutInflater)
        setContentView(binding.root)
        ViewCompat.setOnApplyWindowInsetsListener(window.decorView) { _, windowInsets ->
            val systemBarInsets = windowInsets.getInsets(WindowInsetsCompat.Type.systemBars())
            binding.toolbar.updatePadding(top = systemBarInsets.top + 8.dp(this))
            binding.recyclerLog.updatePadding(bottom = systemBarInsets.bottom)
            WindowInsetsCompat.CONSUMED
        }
        WindowCompat.getInsetsController(window, window.decorView).run {
            isAppearanceLightStatusBars = false
            isAppearanceLightNavigationBars = true
        }

        binding.refreshLayout.setColorSchemeColors(Color.parseColor("#111199"))
        binding.refreshLayout.isEnabled = false

        val list = listOf<Log>()
        val adapter = LogAdapter(list)
        binding.recyclerLog.adapter = adapter

        binding.buttonDelete.setOnClickListener {
            viewModel.deleteAll()
        }

        binding.buttonShare.setOnClickListener {
            viewModel.logs.value?.let { logs ->
                val text = logs.joinToString("\n\n")

                //writing log to file
                val path = File(filesDir, "nebula")
                val file = File(path, "nebula_log.txt")
                path.mkdirs()
                FileWriter(file).use { writer ->
                    writer.write(FILE_HEADER)
                    writer.write(text)
                }

                //sharing file
                val authority = "${applicationContext.packageName}.nebula.fileprovider"
                val uri = FileProvider.getUriForFile(this, authority, file)
                val intent = Intent(Intent.ACTION_SEND).apply {
                    type = "text/plain"
                    putExtra(Intent.EXTRA_STREAM, uri)
                    addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION) // Grant read permission to the recipient app
                }
                startActivity(Intent.createChooser(intent, "Share File"))
            }
        }

        binding.buttonSave.setOnClickListener {
            viewModel.logs.value?.let {
                saveFileLauncher.launch("nebula_log.txt")
            }
        }

        viewModel.logs.observe(this) {
            binding.textCounter.text = getString(R.string.n_logs, it.size.toCurrency(false))
            binding.textEmpty.isVisible = it.isEmpty()
            adapter.logs = it
            adapter.notifyDataSetChanged()
        }

        viewModel.isLoading.observe(this) {
            binding.refreshLayout.isRefreshing = it
        }
    }
}